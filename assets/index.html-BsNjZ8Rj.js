import{_ as a,r as s,o as n,c as o,a as t,e as l,d as r,b as p}from"./app-T_7WiRgL.js";const d={},c={id:"图片优化",tabindex:"-1"},h={class:"header-anchor",href:"#图片优化"};function m(k,e){const i=s("Badge");return n(),o("div",null,[t("h2",c,[t("a",h,[t("span",null,[e[0]||(e[0]=l("图片优化 ")),r(i,{type:"warning",text:"试验性"})])])]),e[1]||(e[1]=p(`<p>当我们在 markdown 中使用 <code>[alt](url)</code> 或者 <code>&lt;img src=&quot;url&quot;&gt;</code> 嵌入图片后，虽然页面按照预期的显示了 图片。</p><p>由于图片的体积不同，当图片体积较小，网络情况良好的时候，我们不会感受到页面的布局有产生明显的抖动。 然而，当图片体积较大，或者网络情况较差时，由于图片为完成加载，原本页面上应该显示图片的位置被后面的 内容挤压，等到图片加载完成后，页面布局会发生变化，图片重新占据应该显示的位置，其它的内容被排开。</p><p>事实上这个体验相当不友好。特别是对于页面内的图片数量较多时，页面会频繁发生布局变化，这一过程还可能 感知到卡顿，较为明显的是布局的抖动。</p><p>因此，让页面布局稳定下来，图片是一个必须解决的问题。</p><p>从 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/img#height" target="_blank" rel="noopener noreferrer">MDN &gt; img</a> 我们可以知道：</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><code>&lt;img&gt;</code> 同时包括 <code>height</code> 和 <code>width</code> 使浏览器在加载图像之前计算图像的长宽比。 此长宽比用于保留显示图像所需的空间，减少甚至防止在下载图像并将其绘制到屏幕上时布局的偏移。 减少布局偏移是良好用户体验和 Web 性能的主要组成部分。</p></div><p>因此，主题围绕这个问题，提供了 一个解决方案：</p><p>为 markdown 文件中的 <code>[alt](url)</code> 或者 <code>&lt;img src=&quot;url&quot;&gt;</code> 自动添加 <code>width</code> 和 <code>height</code> 属性。</p><p>你可以通过配置 <code>markdownPower</code> 来启用它：</p><div class="language-ts" data-ext="ts" data-title="ts"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> default</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> defineUserConfig</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  theme</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">plumeTheme</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    plugins</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">      markdownPower</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        imageSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">, </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// &#39;local&#39; | &#39;all&#39;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  })</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span></span></code></pre></div><p>启用此功能后，主题会通过图片资源地址，获取图片的原始尺寸，然后为图片添加 <code>width</code> 和 <code>height</code> 属性。</p><ul><li>如果设置为 <code>&#39;local&#39;</code>， 则仅为 本地图片添加 <code>width</code> 和 <code>height</code> 属性。</li><li>如果设置为 <code>&#39;all&#39;</code>， 则包括 <strong>本地图片</strong> 和 <strong>网络图片</strong> 都 添加 <code>width</code> 和 <code>height</code> 属性。</li><li>如果设置为 <code>true</code>， 则等同于 <code>&#39;local&#39;</code></li></ul><div class="hint-container important"><p class="hint-container-title">重要</p><p>请注意，出于性能考虑，即使您启用了此功能，该功能也仅在 构建生产包时生效。</p></div><div class="hint-container important"><p class="hint-container-title">重要</p><p>请谨慎使用 <code>&#39;all&#39;</code> 选项，该选项会在构建生产包时，请求所有 markdown 中包含的 远程图片资源， 这对于包含较多图片资源的站点而言，会使得构建时间变长。</p><p>主题也针对此类情况做了优化，请求远程图片仅在获取 <strong>几 KB</strong> 的数据包足够分析尺寸后不再等待请求完成， 同时并发请求其他图片资源。这在一定程度上能够改善构建时间。</p></div><details class="hint-container details"><summary>还有其他方案吗？</summary><p>事实上有的，当前的方案其实是一个折中的方案。</p><p>我考虑过使用 <a href="https://github.com/evanw/thumbhash" target="_blank" rel="noopener noreferrer">thumbhash</a> 为图片生成缩略图，通过 占位图 和 懒加载 等技术方案实现更为平滑优雅的图片加载体验。</p><p>然而这是有代价的，这需要使用的 <a href="https://github.com/lovell/sharp" target="_blank" rel="noopener noreferrer">sharp</a> 或 <a href="https://github.com/google/skia/tree/main/modules/canvaskit" target="_blank" rel="noopener noreferrer">canvaskit</a> 等图片处理库，对图片进行处理分析， 再通过 <a href="https://github.com/evanw/thumbhash" target="_blank" rel="noopener noreferrer">thumbhash</a> 生成大概 <code>20byte</code> 大小的缩略图。这需要花费更多的时间， 这可能对于用户而言是不可接受的。</p></details>`,15))])}const u=a(d,[["render",m],["__file","index.html.vue"]]),y=JSON.parse(`{"path":"/guide/optimize-build/","title":"构建优化","lang":"zh-CN","frontmatter":{"title":"构建优化","icon":"clarity:bundle-solid","createTime":"2024/09/10 01:50:20","permalink":"/guide/optimize-build/","description":"图片优化 当我们在 markdown 中使用 [alt](url) 或者 <img src=\\"url\\"> 嵌入图片后，虽然页面按照预期的显示了 图片。 由于图片的体积不同，当图片体积较小，网络情况良好的时候，我们不会感受到页面的布局有产生明显的抖动。 然而，当图片体积较大，或者网络情况较差时，由于图片为完成加载，原本页面上应该显示图片的位置被后面的 内...","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"],["meta",{"property":"og:url","content":"https://plume.pengzhanbo.cn/guide/optimize-build/"}],["meta",{"property":"og:site_name","content":"Plume 主题"}],["meta",{"property":"og:title","content":"构建优化"}],["meta",{"property":"og:description","content":"图片优化 当我们在 markdown 中使用 [alt](url) 或者 <img src=\\"url\\"> 嵌入图片后，虽然页面按照预期的显示了 图片。 由于图片的体积不同，当图片体积较小，网络情况良好的时候，我们不会感受到页面的布局有产生明显的抖动。 然而，当图片体积较大，或者网络情况较差时，由于图片为完成加载，原本页面上应该显示图片的位置被后面的 内..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-10T08:47:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-10T08:47:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"构建优化\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-10T08:47:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"图片优化","slug":"图片优化","link":"#图片优化","children":[]}],"readingTime":{"minutes":2.9,"words":871},"git":{"createdTime":1725958052000,"updatedTime":1725958052000,"contributors":[{"name":"pengzhanbo","email":"volodymyr@foxmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"notes/theme/guide/构建优化.md"}`);export{u as comp,y as data};
